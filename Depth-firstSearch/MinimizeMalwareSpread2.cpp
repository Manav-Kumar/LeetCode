#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <stack>
#include <unordered_map>
#include <set>
#include <cmath>
#include <math.h>
#include <unordered_set>
#include <algorithm>
#include <climits>
using namespace std;

#define rep(i,a,b) for(int i=a;i<b;i++)
#define repR(i,a,b) for(int i=a;i>=b;i--)
#define ll long long
#define pb push_back
#define vb vector<bool>
#define vi vector<int>
#define vvi vector<vi >
#define vpii vector<pair<int,int> >
#define vvpii vector<vpii>
#define vvb vector<vector<bool> >
#define vc vector<char>
#define vvc vector<vc>
#define vs vector<string>
#define vvs vector<vs>


void helper(vvi &adj, vb &visited, int idx,int &curr,int &restricted){

	visited[idx] = true, curr++;
	for(int &next: adj[idx]){
		if(next != restricted && !visited[next]) helper(adj, visited, next, curr, restricted);
	}
}


int minMalwareSpread(vvi &graph, vi &initial){
	int n = graph.size();
	vvi adj(n);
	rep(i, 0, n){
		rep(j, 0, n){
			if(graph[i][j]){
				adj[i].push_back(j), adj[j].push_back(i);
			}
		}
	}
	vb affected(n, false);
	sort(initial.begin(), initial.end(), greater<int>());
	for(int &i: initial) affected[i] = true;
	int count = INT_MAX, idx = -1;
	for(int &i: initial){
		int curr = 0;
		vb visited(n, false);
		for(int j = 0;j < n;j++){
			if(i != j && affected[j] && !visited[j]) helper(adj, visited, j, curr, i);
		}
		if(curr < count){
			count = curr, idx = i;
		}
	}
	return idx;
}


void dfs(vvi &adj,vb &visited,int idx,vb &affected, int &count,int &neigh){

	if(affected[idx]){
		if(neigh == -1) neigh = idx;
		else neigh = -2;
		return;
	}
	visited[idx] = true, count++;
	for(int &next: adj[idx]){
		if(!visited[next]) dfs(adj, visited, next, affected, count, neigh);
	}
}


int minMalwareSpread2(vvi &graph,vi &initial){
	int n = graph.size(), ct = 0;

	vvi adj(n);
	rep(i, 0, n){
		for(int j = i + 1;j < n;j++){
			if(graph[i][j]){
				adj[i].push_back(j), adj[j].push_back(i);
			}
		}
	}

	sort(initial.begin(), initial.end(),greater<int> ());
	vb visited(n, false), affected(n, false);
	vi reachables(n, 0);
	for(int &i: initial) affected[i] = true, reachables[i] = 1;

	for(int i = 0;i < n;i++){
		int neigh = -1, count = 0;
		if(!visited[i] && !affected[i]) dfs(adj, visited, i, affected, count, neigh);
		if(neigh >= 0){
			reachables[neigh] += count;
		}	
	}

	int value = INT_MIN, idx = n + 1;
	for(int &i: initial){
		if(reachables[i] >= value) idx = i, value = reachables[i];
	}

	return idx;
}


int main(){
	int n, m;
	cin >> n;
	vvi graph(n, vi(n, 0));
	for(vi &a: graph) for(int &b: a) cin >> b;
	cin >> m;
	vi initial(m);
	for(int &a: initial) cin >> a;
	cout << minMalwareSpread2(graph, initial) << "\n";
	return 0;
}



