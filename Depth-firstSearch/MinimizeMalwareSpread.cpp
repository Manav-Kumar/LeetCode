#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <cmath>
#include <math.h>
#include <unordered_set>
#include <climits>
using namespace std;

#define rep(i,a,b) for(int i=a;i<b;i++)
#define repR(i,a,b) for(int i=a;i>=b;i--)
#define ll long long
#define pb push_back
#define vb vector<bool>
#define vi vector<int>
#define vvi vector<vector<int> >
#define vvb vector<vector<bool> >


int helper(vvi &graph,int idx, vb &visited, vb &isPresent,int &pstCount){
	int count = 1, n = visited.size();
	visited[idx] = true;
	if(isPresent[idx]) pstCount++;
	rep(i,0,n){
		if(i == idx || visited[i] || graph[idx][i] == 0) continue;
		count += helper(graph, i, visited, isPresent, pstCount);
	}
	return count;
}

int minMalwareSpread(vvi &graph,vi &initial)
{
	int ans = 0, count = 0, n = graph.size();
	vb isPresent(n, false);
	for(int &i: initial) isPresent[i] = true;
	vb visited(n, false);
	for(int &i: initial)
	{
		if(visited[i]) continue;
		int pstCount = 0;
		int temp = helper(graph, i, visited, isPresent, pstCount);
		if(pstCount == 1 && count < temp){
			count = temp, ans = i;
		}
	}
	return ans;
}

int main(){
	int n;
	cin >> n;
	vvi graph(n, vi(n));
	for(vi &a: graph){
		for(int &b: a) cin >> b;
	}
	
	return 0;
}

